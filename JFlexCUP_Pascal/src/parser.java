
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 27 06:45:31 BRT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import utils.SemanticManager;
import utils.Objeto;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 27 06:45:31 BRT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\220\005\000\002\220\002\000\002\004\004" +
    "\000\002\007\007\000\002\011\006\000\002\260\005\000" +
    "\002\260\002\000\002\240\003\000\002\240\002\000\002" +
    "\012\006\000\002\275\005\000\002\275\002\000\002\241" +
    "\003\000\002\241\002\000\002\017\005\000\002\013\006" +
    "\000\002\274\005\000\002\274\002\000\002\242\003\000" +
    "\002\242\002\000\002\021\005\000\002\014\006\000\002" +
    "\273\005\000\002\273\002\000\002\243\003\000\002\243" +
    "\002\000\002\022\005\000\002\015\003\000\002\272\005" +
    "\000\002\272\002\000\002\250\003\000\002\250\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\026\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\032\003\000\002\034\003\000\002\034\003" +
    "\000\002\010\005\000\002\230\003\000\002\025\005\000" +
    "\002\031\007\000\002\040\003\000\002\027\004\000\002" +
    "\033\004\000\002\036\005\000\002\266\005\000\002\266" +
    "\002\000\002\237\003\000\002\237\002\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\005\000\002\054\006\000\002\055\003\000\002" +
    "\056\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\061\011\000\002\062\011" +
    "\000\002\265\005\000\002\265\002\000\002\247\003\000" +
    "\002\247\003\000\002\063\003\000\002\063\003\000\002" +
    "\064\006\000\002\065\006\000\002\066\004\000\002\066" +
    "\002\000\002\067\003\000\002\005\004\000\002\264\005" +
    "\000\002\264\002\000\002\070\004\000\002\070\003\000" +
    "\002\236\004\000\002\236\002\000\002\071\003\000\002" +
    "\071\002\000\002\235\003\000\002\235\003\000\002\235" +
    "\003\000\002\121\005\000\002\246\003\000\002\246\003" +
    "\000\002\074\004\000\002\075\004\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\107\005\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\113\006\000\002\114\006\000\002\115\012" +
    "\000\002\245\003\000\002\245\003\000\002\116\003\000" +
    "\002\120\003\000\002\111\003\000\002\111\003\000\002" +
    "\122\007\000\002\234\002\000\002\234\004\000\002\123" +
    "\011\000\002\263\005\000\002\263\002\000\002\124\005" +
    "\000\002\125\004\000\002\255\005\000\002\255\002\000" +
    "\002\112\007\000\002\256\005\000\002\256\002\000\002" +
    "\104\006\000\002\257\005\000\002\257\002\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\102\003\000\002\105\003\000\002\106\003\000" +
    "\002\077\004\000\002\233\004\000\002\233\002\000\002" +
    "\117\005\000\002\271\005\000\002\271\002\000\002\211" +
    "\004\000\002\270\005\000\002\270\002\000\002\212\003" +
    "\000\002\212\003\000\002\212\003\000\002\212\003\000" +
    "\002\212\003\000\002\212\003\000\002\212\003\000\002" +
    "\212\003\000\002\212\005\000\002\276\002\000\002\212" +
    "\005\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\166\003\000\002\166\003\000\002\167\003\000" +
    "\002\167\003\000\002\167\003\000\002\171\006\000\002" +
    "\165\005\000\002\131\005\000\002\037\004\000\002\037" +
    "\002\000\002\164\004\000\002\232\003\000\002\232\002" +
    "\000\002\216\004\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\132\003\000\002" +
    "\132\003\000\002\136\005\000\002\135\005\000\002\161" +
    "\003\000\002\162\003\000\002\133\004\000\002\225\003" +
    "\000\002\225\002\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\137\003\000\002\140\011\000\002" +
    "\267\005\000\002\267\002\000\002\144\003\000\002\145" +
    "\003\000\002\141\005\000\002\142\005\000\002\146\003" +
    "\000\002\143\005\000\002\147\003\000\002\134\004\000" +
    "\002\152\004\000\002\152\002\000\002\153\004\000\002" +
    "\153\003\000\002\226\003\000\002\226\002\000\002\227" +
    "\004\000\002\227\002\000\002\150\004\000\002\261\005" +
    "\000\002\261\002\000\002\163\005\000\002\151\010\000" +
    "\002\262\005\000\002\262\002\000\002\154\003\000\002" +
    "\224\003\000\002\224\002\000\002\156\007\000\002\254" +
    "\005\000\002\254\002\000\002\157\004\000\002\223\005" +
    "\000\002\223\002\000\002\222\004\000\002\222\002\000" +
    "\002\155\003\000\002\215\003\000\002\174\003\000\002" +
    "\277\002\000\002\170\005\000\002\173\003\000\002\175" +
    "\003\000\002\101\003\000\002\172\003\000\002\051\003" +
    "\000\002\047\003\000\002\023\003\000\002\046\003\000" +
    "\002\044\003\000\002\045\003\000\002\050\003\000\002" +
    "\006\004\000\002\100\004\000\002\251\005\000\002\251" +
    "\002\000\002\252\005\000\002\252\002\000\002\253\005" +
    "\000\002\253\002\000\002\176\003\000\002\176\003\000" +
    "\002\177\003\000\002\200\006\000\002\200\004\000\002" +
    "\217\004\000\002\221\003\000\002\221\002\000\002\203" +
    "\003\000\002\204\003\000\002\204\002\000\002\202\004" +
    "\000\002\016\003\000\002\020\004\000\002\020\003\000" +
    "\002\244\003\000\002\244\003\000\002\126\003\000\002" +
    "\126\003\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\126\003\000\002\126\003\000\002\127\003" +
    "\000\002\127\003\000\002\127\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\205\003\000\002\214\003\000\002\207" +
    "\003\000\002\207\003\000\002\210\003\000\002\210\002" +
    "\000\002\206\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ce\000\004\004\006\001\002\000\004\002\u01d0\001" +
    "\002\000\020\005\023\006\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\014\ufff6\015\ufff6\001\002\000\004\071\010\001\002\000" +
    "\006\047\011\061\ufffd\001\002\000\110\013\ufedc\020\ufedc" +
    "\024\ufedc\026\ufedc\030\ufedc\031\ufedc\033\ufedc\034\ufedc\041" +
    "\ufedc\042\ufedc\043\ufedc\047\ufedc\050\ufedc\051\ufedc\052\ufedc" +
    "\053\ufedc\054\ufedc\055\ufedc\056\ufedc\057\ufedc\060\ufedc\061" +
    "\ufedc\062\ufedc\063\ufedc\064\ufedc\067\ufedc\070\ufedc\071\ufedc" +
    "\101\ufedc\102\ufedc\103\ufedc\104\ufedc\105\ufedc\106\ufedc\107" +
    "\ufedc\001\002\000\004\071\010\001\002\000\004\061\013" +
    "\001\002\000\020\005\uffff\006\uffff\007\uffff\010\uffff\012" +
    "\uffff\014\uffff\015\uffff\001\002\000\010\050\uff06\060\uff06" +
    "\062\017\001\002\000\004\050\016\001\002\000\004\061" +
    "\ufffe\001\002\000\004\071\010\001\002\000\006\050\uff0b" +
    "\060\uff0b\001\002\000\010\050\uff06\060\uff06\062\017\001" +
    "\002\000\006\050\uff07\060\uff07\001\002\000\010\053\070" +
    "\054\051\073\ufede\001\002\000\004\012\u016e\001\002\000" +
    "\016\006\ufff7\007\ufff7\010\ufff7\012\ufff7\014\ufff7\015\ufff7" +
    "\001\002\000\016\006\031\007\ufff1\010\ufff1\012\ufff1\014" +
    "\ufff1\015\ufff1\001\002\000\004\063\030\001\002\000\004" +
    "\002\000\001\002\000\004\071\010\001\002\000\014\007" +
    "\ufff2\010\ufff2\012\ufff2\014\ufff2\015\ufff2\001\002\000\014" +
    "\007\036\010\uffeb\012\uffeb\014\uffeb\015\uffeb\001\002\000" +
    "\012\010\uffec\012\uffec\014\uffec\015\uffec\001\002\000\012" +
    "\010\373\012\uffe5\014\uffe5\015\uffe5\001\002\000\004\071" +
    "\010\001\002\000\004\101\046\001\002\000\004\061\041" +
    "\001\002\000\014\010\uffed\012\uffed\014\uffed\015\uffed\071" +
    "\010\001\002\000\012\010\uffef\012\uffef\014\uffef\015\uffef" +
    "\001\002\000\004\061\044\001\002\000\014\010\uffed\012" +
    "\uffed\014\uffed\015\uffed\071\010\001\002\000\012\010\uffee" +
    "\012\uffee\014\uffee\015\uffee\001\002\000\032\016\057\017" +
    "\uff45\044\uff45\045\uff45\046\uff45\047\064\053\070\054\051" +
    "\070\055\071\010\073\ufede\077\061\001\002\000\020\013" +
    "\ufef5\050\ufef5\052\ufef5\060\ufef5\061\ufef5\062\ufef5\064\ufef5" +
    "\001\002\000\004\064\370\001\002\000\024\037\ufee1\040" +
    "\ufee1\047\ufee1\051\ufee1\053\ufee1\054\ufee1\071\ufee1\073\ufee1" +
    "\077\ufee1\001\002\000\014\013\uff0f\020\uff0f\050\uff0f\052" +
    "\uff0f\061\uff0f\001\002\000\004\064\uff49\001\002\000\004" +
    "\061\uffea\001\002\000\004\071\010\001\002\000\014\013" +
    "\uff4c\050\uff4c\052\uff4c\060\uff4c\061\uff4c\001\002\000\012" +
    "\017\uff46\044\uff46\045\uff46\046\uff46\001\002\000\010\013" +
    "\uff4e\050\uff4e\061\uff4e\001\002\000\076\013\ufedd\020\ufedd" +
    "\024\ufedd\026\ufedd\030\ufedd\031\ufedd\033\ufedd\034\ufedd\041" +
    "\ufedd\042\ufedd\043\ufedd\050\ufedd\052\ufedd\053\ufedd\054\ufedd" +
    "\055\ufedd\056\ufedd\057\ufedd\060\ufedd\061\ufedd\062\ufedd\064" +
    "\ufedd\071\ufedd\101\ufedd\102\ufedd\103\ufedd\104\ufedd\105\ufedd" +
    "\106\ufedd\107\ufedd\001\002\000\076\013\ufee3\020\ufee3\024" +
    "\ufee3\026\ufee3\030\ufee3\031\ufee3\033\ufee3\034\ufee3\041\ufee3" +
    "\042\ufee3\043\ufee3\050\ufee3\052\ufee3\053\ufee3\054\ufee3\055" +
    "\ufee3\056\ufee3\057\ufee3\060\ufee3\061\ufee3\062\ufee3\064\ufee3" +
    "\071\ufee3\101\ufee3\102\ufee3\103\ufee3\104\ufee3\105\ufee3\106" +
    "\ufee3\107\ufee3\001\002\000\010\013\uff51\050\uff51\061\uff51" +
    "\001\002\000\004\071\010\001\002\000\010\013\uff4f\050" +
    "\uff4f\061\uff4f\001\002\000\012\017\120\044\123\045\122" +
    "\046\117\001\002\000\014\013\uff4d\050\uff4d\052\uff4d\060" +
    "\uff4d\061\uff4d\001\002\000\024\037\ufee0\040\ufee0\047\ufee0" +
    "\051\ufee0\053\ufee0\054\ufee0\071\ufee0\073\ufee0\077\ufee0\001" +
    "\002\000\012\053\070\054\051\071\010\073\ufede\001\002" +
    "\000\024\037\ufedf\040\ufedf\047\ufedf\051\ufedf\053\ufedf\054" +
    "\ufedf\071\ufedf\073\ufedf\077\ufedf\001\002\000\010\013\uff50" +
    "\050\uff50\061\uff50\001\002\000\004\073\110\001\002\000" +
    "\076\013\uff03\020\uff03\024\uff03\026\uff03\030\uff03\031\uff03" +
    "\033\uff03\034\uff03\041\uff03\042\uff03\043\uff03\050\uff03\052" +
    "\uff03\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03\060\uff03" +
    "\061\uff03\062\uff03\064\uff03\071\uff03\101\uff03\102\uff03\103" +
    "\uff03\104\uff03\105\uff03\106\uff03\107\uff03\001\002\000\076" +
    "\013\uff02\020\uff02\024\uff02\026\uff02\030\uff02\031\uff02\033" +
    "\uff02\034\uff02\041\uff02\042\uff02\043\uff02\050\uff02\052\uff02" +
    "\053\uff02\054\uff02\055\uff02\056\uff02\057\uff02\060\uff02\061" +
    "\uff02\062\uff02\064\uff02\071\uff02\101\uff02\102\uff02\103\uff02" +
    "\104\uff02\105\uff02\106\uff02\107\uff02\001\002\000\020\013" +
    "\ufef3\050\ufef3\052\ufef3\060\ufef3\061\ufef3\062\ufef3\064\ufef3" +
    "\001\002\000\102\013\uff01\020\uff01\024\uff01\026\uff01\030" +
    "\uff01\031\uff01\033\uff01\034\uff01\041\uff01\042\uff01\043\uff01" +
    "\050\uff01\052\uff01\053\uff01\054\uff01\055\uff01\056\uff01\057" +
    "\uff01\060\uff01\061\uff01\062\uff01\063\106\064\uff01\071\uff01" +
    "\101\uff01\102\uff01\103\uff01\104\uff01\105\uff01\106\uff01\107" +
    "\uff01\110\104\001\002\000\020\013\ufef4\050\ufef4\052\ufef4" +
    "\060\ufef4\061\ufef4\062\ufef4\064\ufef4\001\002\000\020\013" +
    "\uff11\050\uff11\052\uff11\060\uff11\061\uff11\062\uff11\064\uff11" +
    "\001\002\000\020\013\ufef6\050\ufef6\052\ufef6\060\ufef6\061" +
    "\ufef6\062\ufef6\064\ufef6\001\002\000\010\053\070\054\051" +
    "\073\ufede\001\002\000\076\013\ufeff\020\ufeff\024\ufeff\026" +
    "\ufeff\030\ufeff\031\ufeff\033\ufeff\034\ufeff\041\ufeff\042\ufeff" +
    "\043\ufeff\050\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff\056" +
    "\ufeff\057\ufeff\060\ufeff\061\ufeff\062\ufeff\064\ufeff\071\ufeff" +
    "\101\ufeff\102\ufeff\103\ufeff\104\ufeff\105\ufeff\106\ufeff\107" +
    "\ufeff\001\002\000\102\013\ufef9\020\ufef9\024\ufef9\026\ufef9" +
    "\030\ufef9\031\ufef9\033\ufef9\034\ufef9\041\ufef9\042\ufef9\043" +
    "\ufef9\050\ufef9\052\ufef9\053\ufef9\054\ufef9\055\ufef9\056\ufef9" +
    "\057\ufef9\060\ufef9\061\ufef9\062\ufef9\064\ufef9\071\ufef9\073" +
    "\110\101\ufef9\102\ufef9\103\ufef9\104\ufef9\105\ufef9\106\ufef9" +
    "\107\ufef9\110\ufef9\001\002\000\100\013\ufefc\020\ufefc\024" +
    "\ufefc\026\ufefc\030\ufefc\031\ufefc\033\ufefc\034\ufefc\041\ufefc" +
    "\042\ufefc\043\ufefc\050\ufefc\052\ufefc\053\ufefc\054\ufefc\055" +
    "\ufefc\056\ufefc\057\ufefc\060\ufefc\061\ufefc\062\ufefc\064\ufefc" +
    "\071\ufefc\101\ufefc\102\ufefc\103\ufefc\104\ufefc\105\ufefc\106" +
    "\ufefc\107\ufefc\110\104\001\002\000\102\013\ufefb\020\ufefb" +
    "\024\ufefb\026\ufefb\030\ufefb\031\ufefb\033\ufefb\034\ufefb\041" +
    "\ufefb\042\ufefb\043\ufefb\050\ufefb\052\ufefb\053\ufefb\054\ufefb" +
    "\055\ufefb\056\ufefb\057\ufefb\060\ufefb\061\ufefb\062\ufefb\063" +
    "\ufefb\064\ufefb\071\ufefb\101\ufefb\102\ufefb\103\ufefb\104\ufefb" +
    "\105\ufefb\106\ufefb\107\ufefb\110\ufefb\001\002\000\100\013" +
    "\ufefa\020\ufefa\024\ufefa\026\ufefa\030\ufefa\031\ufefa\033\ufefa" +
    "\034\ufefa\041\ufefa\042\ufefa\043\ufefa\050\ufefa\052\ufefa\053" +
    "\ufefa\054\ufefa\055\ufefa\056\ufefa\057\ufefa\060\ufefa\061\ufefa" +
    "\062\ufefa\064\ufefa\071\ufefa\101\ufefa\102\ufefa\103\ufefa\104" +
    "\ufefa\105\ufefa\106\ufefa\107\ufefa\110\ufefa\001\002\000\076" +
    "\013\uff00\020\uff00\024\uff00\026\uff00\030\uff00\031\uff00\033" +
    "\uff00\034\uff00\041\uff00\042\uff00\043\uff00\050\uff00\052\uff00" +
    "\053\uff00\054\uff00\055\uff00\056\uff00\057\uff00\060\uff00\061" +
    "\uff00\062\uff00\064\uff00\071\uff00\101\uff00\102\uff00\103\uff00" +
    "\104\uff00\105\uff00\106\uff00\107\uff00\001\002\000\076\013" +
    "\ufefd\020\ufefd\024\ufefd\026\ufefd\030\ufefd\031\ufefd\033\ufefd" +
    "\034\ufefd\041\ufefd\042\ufefd\043\ufefd\050\ufefd\052\ufefd\053" +
    "\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\061\ufefd" +
    "\062\ufefd\064\ufefd\071\ufefd\101\ufefd\102\ufefd\103\ufefd\104" +
    "\ufefd\105\ufefd\106\ufefd\107\ufefd\001\002\000\076\013\ufefe" +
    "\020\ufefe\024\ufefe\026\ufefe\030\ufefe\031\ufefe\033\ufefe\034" +
    "\ufefe\041\ufefe\042\ufefe\043\ufefe\050\ufefe\052\ufefe\053\ufefe" +
    "\054\ufefe\055\ufefe\056\ufefe\057\ufefe\060\ufefe\061\ufefe\062" +
    "\ufefe\064\ufefe\071\ufefe\101\ufefe\102\ufefe\103\ufefe\104\ufefe" +
    "\105\ufefe\106\ufefe\107\ufefe\001\002\000\102\013\ufef8\020" +
    "\ufef8\024\ufef8\026\ufef8\030\ufef8\031\ufef8\033\ufef8\034\ufef8" +
    "\041\ufef8\042\ufef8\043\ufef8\050\ufef8\052\ufef8\053\ufef8\054" +
    "\ufef8\055\ufef8\056\ufef8\057\ufef8\060\ufef8\061\ufef8\062\ufef8" +
    "\063\ufef8\064\ufef8\071\ufef8\101\ufef8\102\ufef8\103\ufef8\104" +
    "\ufef8\105\ufef8\106\ufef8\107\ufef8\110\ufef8\001\002\000\010" +
    "\013\uff42\050\uff42\061\uff42\001\002\000\004\020\362\001" +
    "\002\000\004\051\347\001\002\000\010\013\uff41\050\uff41" +
    "\061\uff41\001\002\000\004\020\344\001\002\000\010\013" +
    "\uff34\035\133\071\010\001\002\000\010\013\uff43\050\uff43" +
    "\061\uff43\001\002\000\010\013\uff47\050\uff47\061\uff47\001" +
    "\002\000\010\013\uff44\050\uff44\061\uff44\001\002\000\010" +
    "\013\uff2e\050\uff2e\061\342\001\002\000\010\013\uff2b\050" +
    "\uff2b\061\336\001\002\000\010\013\uff30\050\uff30\061\334" +
    "\001\002\000\004\060\331\001\002\000\006\061\141\071" +
    "\uff24\001\002\000\004\013\136\001\002\000\010\013\uff32" +
    "\050\uff32\061\uff32\001\002\000\010\013\uff3b\050\uff3b\061" +
    "\uff3b\001\002\000\004\071\uff25\001\002\000\004\071\010" +
    "\001\002\000\024\037\ufede\040\ufede\047\ufede\051\ufede\053" +
    "\070\054\051\071\ufede\073\ufede\077\ufede\001\002\000\004" +
    "\071\uff26\001\002\000\006\060\304\071\uff1c\001\002\000" +
    "\024\037\175\040\173\047\161\051\165\053\070\054\051" +
    "\071\010\073\ufede\077\061\001\002\000\054\013\uff74\020" +
    "\uff74\024\uff74\026\uff74\030\uff74\031\uff74\033\uff74\034\uff74" +
    "\050\uff74\052\uff74\060\uff74\061\uff74\062\uff74\071\uff74\101" +
    "\157\102\155\103\154\104\156\105\150\106\147\107\151" +
    "\001\002\000\006\060\uff1b\071\uff1b\001\002\000\024\037" +
    "\ufeed\040\ufeed\047\ufeed\051\ufeed\053\ufeed\054\ufeed\071\ufeed" +
    "\073\ufeed\077\ufeed\001\002\000\024\037\ufeee\040\ufeee\047" +
    "\ufeee\051\ufeee\053\ufeee\054\ufeee\071\ufeee\073\ufeee\077\ufeee" +
    "\001\002\000\024\037\ufeec\040\ufeec\047\ufeec\051\ufeec\053" +
    "\ufeec\054\ufeec\071\ufeec\073\ufeec\077\ufeec\001\002\000\024" +
    "\037\ufede\040\ufede\047\ufede\051\ufede\053\070\054\051\071" +
    "\ufede\073\ufede\077\ufede\001\002\000\036\013\uff76\020\uff76" +
    "\024\uff76\026\uff76\030\uff76\031\uff76\033\uff76\034\uff76\050" +
    "\uff76\052\uff76\060\uff76\061\uff76\062\uff76\071\uff76\001\002" +
    "\000\024\037\ufef0\040\ufef0\047\ufef0\051\ufef0\053\ufef0\054" +
    "\ufef0\071\ufef0\073\ufef0\077\ufef0\001\002\000\024\037\ufef1" +
    "\040\ufef1\047\ufef1\051\ufef1\053\ufef1\054\ufef1\071\ufef1\073" +
    "\ufef1\077\ufef1\001\002\000\024\037\ufeef\040\ufeef\047\ufeef" +
    "\051\ufeef\053\ufeef\054\ufeef\071\ufeef\073\ufeef\077\ufeef\001" +
    "\002\000\024\037\ufef2\040\ufef2\047\ufef2\051\ufef2\053\ufef2" +
    "\054\ufef2\071\ufef2\073\ufef2\077\ufef2\001\002\000\036\013" +
    "\uff75\020\uff75\024\uff75\026\uff75\030\uff75\031\uff75\033\uff75" +
    "\034\uff75\050\uff75\052\uff75\060\uff75\061\uff75\062\uff75\071" +
    "\uff75\001\002\000\024\037\ufede\040\ufede\047\ufede\051\ufede" +
    "\053\070\054\051\071\ufede\073\ufede\077\ufede\001\002\000" +
    "\074\013\uff68\020\uff68\024\uff68\026\uff68\030\uff68\031\uff68" +
    "\033\uff68\034\uff68\041\uff68\042\uff68\043\uff68\050\uff68\052" +
    "\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68" +
    "\061\uff68\062\uff68\071\uff68\101\uff68\102\uff68\103\uff68\104" +
    "\uff68\105\uff68\106\uff68\107\uff68\001\002\000\104\013\uff5f" +
    "\020\uff5f\024\uff5f\026\uff5f\030\uff5f\031\uff5f\033\uff5f\034" +
    "\uff5f\041\uff5f\042\uff5f\043\uff5f\050\uff5f\051\uff5f\052\uff5f" +
    "\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061" +
    "\uff5f\062\uff5f\063\uff5f\067\uff5f\070\uff5f\071\uff5f\101\uff5f" +
    "\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\001" +
    "\002\000\104\013\uff5c\020\uff5c\024\uff5c\026\uff5c\030\uff5c" +
    "\031\uff5c\033\uff5c\034\uff5c\041\uff5c\042\uff5c\043\uff5c\050" +
    "\uff5c\051\uff5c\052\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c" +
    "\057\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\067\uff5c\070" +
    "\uff5c\071\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c" +
    "\106\uff5c\107\uff5c\001\002\000\026\037\ufede\040\ufede\047" +
    "\ufede\051\ufede\052\uff56\053\070\054\051\071\ufede\073\ufede" +
    "\077\ufede\001\002\000\074\013\uff66\020\uff66\024\uff66\026" +
    "\uff66\030\uff66\031\uff66\033\uff66\034\uff66\041\uff66\042\uff66" +
    "\043\uff66\050\uff66\052\uff66\053\uff66\054\uff66\055\uff66\056" +
    "\uff66\057\uff66\060\uff66\061\uff66\062\uff66\071\uff66\101\uff66" +
    "\102\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\001" +
    "\002\000\074\013\uff67\020\uff67\024\uff67\026\uff67\030\uff67" +
    "\031\uff67\033\uff67\034\uff67\041\uff67\042\uff67\043\uff67\050" +
    "\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057\uff67" +
    "\060\uff67\061\uff67\062\uff67\071\uff67\101\uff67\102\uff67\103" +
    "\uff67\104\uff67\105\uff67\106\uff67\107\uff67\001\002\000\104" +
    "\013\uff5e\020\uff5e\024\uff5e\026\uff5e\030\uff5e\031\uff5e\033" +
    "\uff5e\034\uff5e\041\uff5e\042\uff5e\043\uff5e\050\uff5e\051\uff5e" +
    "\052\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e\057\uff5e\060" +
    "\uff5e\061\uff5e\062\uff5e\063\uff5e\067\uff5e\070\uff5e\071\uff5e" +
    "\101\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e\106\uff5e\107" +
    "\uff5e\001\002\000\074\013\uff6b\020\uff6b\024\uff6b\026\uff6b" +
    "\030\uff6b\031\uff6b\033\uff6b\034\uff6b\041\uff6b\042\uff6b\043" +
    "\uff6b\050\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b" +
    "\057\uff6b\060\uff6b\061\uff6b\062\uff6b\071\uff6b\101\uff6b\102" +
    "\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\001\002" +
    "\000\104\013\uff12\020\uff12\024\uff12\026\uff12\030\uff12\031" +
    "\uff12\033\uff12\034\uff12\041\uff12\042\uff12\043\uff12\047\uff0d" +
    "\050\uff12\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12\056" +
    "\uff12\057\uff12\060\uff12\061\uff12\062\uff12\063\uff12\070\uff12" +
    "\071\uff12\101\uff12\102\uff12\103\uff12\104\uff12\105\uff12\106" +
    "\uff12\107\uff12\001\002\000\024\037\uff64\040\uff64\047\uff64" +
    "\051\uff64\053\uff64\054\uff64\071\uff64\073\uff64\077\uff64\001" +
    "\002\000\076\013\uff53\020\uff53\024\uff53\026\uff53\030\uff53" +
    "\031\uff53\033\uff53\034\uff53\041\uff53\042\uff53\043\uff53\047" +
    "\254\050\uff53\052\uff53\053\uff53\054\uff53\055\uff53\056\uff53" +
    "\057\uff53\060\uff53\061\uff53\062\uff53\071\uff53\101\uff53\102" +
    "\uff53\103\uff53\104\uff53\105\uff53\106\uff53\107\uff53\001\002" +
    "\000\074\013\uff69\020\uff69\024\uff69\026\uff69\030\uff69\031" +
    "\uff69\033\uff69\034\uff69\041\uff69\042\uff69\043\uff69\050\uff69" +
    "\052\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057\uff69\060" +
    "\uff69\061\uff69\062\uff69\071\uff69\101\uff69\102\uff69\103\uff69" +
    "\104\uff69\105\uff69\106\uff69\107\uff69\001\002\000\004\063" +
    "\247\001\002\000\104\013\uff60\020\uff60\024\uff60\026\uff60" +
    "\030\uff60\031\uff60\033\uff60\034\uff60\041\uff60\042\uff60\043" +
    "\uff60\050\uff60\051\uff60\052\uff60\053\uff60\054\uff60\055\uff60" +
    "\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063\uff60\067" +
    "\uff60\070\uff60\071\uff60\101\uff60\102\uff60\103\uff60\104\uff60" +
    "\105\uff60\106\uff60\107\uff60\001\002\000\004\070\246\001" +
    "\002\000\074\013\uff6a\020\uff6a\024\uff6a\026\uff6a\030\uff6a" +
    "\031\uff6a\033\uff6a\034\uff6a\041\uff6a\042\uff6a\043\uff6a\050" +
    "\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a" +
    "\060\uff6a\061\uff6a\062\uff6a\071\uff6a\101\uff6a\102\uff6a\103" +
    "\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\001\002\000\062" +
    "\013\uff71\020\uff71\024\uff71\026\uff71\030\uff71\031\uff71\033" +
    "\uff71\034\uff71\042\243\050\uff71\052\uff71\053\242\054\240" +
    "\060\uff71\061\uff71\062\uff71\071\uff71\101\uff71\102\uff71\103" +
    "\uff71\104\uff71\105\uff71\106\uff71\107\uff71\001\002\000\104" +
    "\013\uff5d\020\uff5d\024\uff5d\026\uff5d\030\uff5d\031\uff5d\033" +
    "\uff5d\034\uff5d\041\uff5d\042\uff5d\043\uff5d\050\uff5d\051\uff5d" +
    "\052\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057\uff5d\060" +
    "\uff5d\061\uff5d\062\uff5d\063\uff5d\067\uff5d\070\uff5d\071\uff5d" +
    "\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107" +
    "\uff5d\001\002\000\004\070\uff18\001\002\000\102\013\uff6d" +
    "\020\uff6d\024\uff6d\026\uff6d\030\uff6d\031\uff6d\033\uff6d\034" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\050\uff6d\051\uff13\052\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\063\uff16\070\uff19\071\uff6d\101\uff6d\102\uff6d" +
    "\103\uff6d\104\uff6d\105\uff6d\106\uff6d\107\uff6d\001\002\000" +
    "\004\051\225\001\002\000\104\013\uff62\020\uff62\024\uff62" +
    "\026\uff62\030\uff62\031\uff62\033\uff62\034\uff62\041\uff62\042" +
    "\uff62\043\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62" +
    "\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62\062\uff62\063" +
    "\uff62\067\uff62\070\uff62\071\uff62\101\uff62\102\uff62\103\uff62" +
    "\104\uff62\105\uff62\106\uff62\107\uff62\001\002\000\074\013" +
    "\uff6e\020\uff6e\024\uff6e\026\uff6e\030\uff6e\031\uff6e\033\uff6e" +
    "\034\uff6e\041\220\042\uff6e\043\216\050\uff6e\052\uff6e\053" +
    "\uff6e\054\uff6e\055\217\056\221\057\215\060\uff6e\061\uff6e" +
    "\062\uff6e\071\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\105" +
    "\uff6e\106\uff6e\107\uff6e\001\002\000\104\013\uff61\020\uff61" +
    "\024\uff61\026\uff61\030\uff61\031\uff61\033\uff61\034\uff61\041" +
    "\uff61\042\uff61\043\uff61\050\uff61\051\uff61\052\uff61\053\uff61" +
    "\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61\061\uff61\062" +
    "\uff61\063\uff61\067\uff61\070\uff61\071\uff61\101\uff61\102\uff61" +
    "\103\uff61\104\uff61\105\uff61\106\uff61\107\uff61\001\002\000" +
    "\104\013\uff5b\020\uff5b\024\uff5b\026\uff5b\030\uff5b\031\uff5b" +
    "\033\uff5b\034\uff5b\041\uff5b\042\uff5b\043\uff5b\050\uff5b\051" +
    "\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b\057\uff5b" +
    "\060\uff5b\061\uff5b\062\uff5b\063\uff5b\067\uff5b\070\uff5b\071" +
    "\uff5b\101\uff5b\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b" +
    "\107\uff5b\001\002\000\074\013\uff6c\020\uff6c\024\uff6c\026" +
    "\uff6c\030\uff6c\031\uff6c\033\uff6c\034\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\050\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056" +
    "\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\071\uff6c\101\uff6c" +
    "\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\001" +
    "\002\000\062\013\uff70\020\uff70\024\uff70\026\uff70\030\uff70" +
    "\031\uff70\033\uff70\034\uff70\042\uff70\050\uff70\052\uff70\053" +
    "\uff70\054\uff70\060\uff70\061\uff70\062\uff70\071\uff70\101\uff70" +
    "\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70\001" +
    "\002\000\024\037\ufee5\040\ufee5\047\ufee5\051\ufee5\053\ufee5" +
    "\054\ufee5\071\ufee5\073\ufee5\077\ufee5\001\002\000\024\037" +
    "\ufee4\040\ufee4\047\ufee4\051\ufee4\053\ufee4\054\ufee4\071\ufee4" +
    "\073\ufee4\077\ufee4\001\002\000\024\037\ufee7\040\ufee7\047" +
    "\ufee7\051\ufee7\053\ufee7\054\ufee7\071\ufee7\073\ufee7\077\ufee7" +
    "\001\002\000\024\037\ufee6\040\ufee6\047\ufee6\051\ufee6\053" +
    "\ufee6\054\ufee6\071\ufee6\073\ufee6\077\ufee6\001\002\000\024" +
    "\037\ufee8\040\ufee8\047\ufee8\051\ufee8\053\ufee8\054\ufee8\071" +
    "\ufee8\073\ufee8\077\ufee8\001\002\000\024\037\175\040\173" +
    "\047\161\051\165\053\070\054\051\071\010\073\ufede\077" +
    "\061\001\002\000\074\013\uff6e\020\uff6e\024\uff6e\026\uff6e" +
    "\030\uff6e\031\uff6e\033\uff6e\034\uff6e\041\220\042\uff6e\043" +
    "\216\050\uff6e\052\uff6e\053\uff6e\054\uff6e\055\217\056\221" +
    "\057\215\060\uff6e\061\uff6e\062\uff6e\071\uff6e\101\uff6e\102" +
    "\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\001\002" +
    "\000\062\013\uff6f\020\uff6f\024\uff6f\026\uff6f\030\uff6f\031" +
    "\uff6f\033\uff6f\034\uff6f\042\uff6f\050\uff6f\052\uff6f\053\uff6f" +
    "\054\uff6f\060\uff6f\061\uff6f\062\uff6f\071\uff6f\101\uff6f\102" +
    "\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\001\002" +
    "\000\024\037\ufede\040\ufede\047\ufede\051\ufede\053\070\054" +
    "\051\071\ufede\073\ufede\077\ufede\001\002\000\004\052\234" +
    "\001\002\000\006\052\uff04\062\230\001\002\000\024\037" +
    "\ufede\040\ufede\047\ufede\051\ufede\053\070\054\051\071\ufede" +
    "\073\ufede\077\ufede\001\002\000\004\052\uff0a\001\002\000" +
    "\006\052\uff04\062\230\001\002\000\004\052\uff05\001\002" +
    "\000\104\013\uff5a\020\uff5a\024\uff5a\026\uff5a\030\uff5a\031" +
    "\uff5a\033\uff5a\034\uff5a\041\uff5a\042\uff5a\043\uff5a\050\uff5a" +
    "\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055\uff5a\056\uff5a\057" +
    "\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\067\uff5a\070\uff5a" +
    "\071\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106" +
    "\uff5a\107\uff5a\001\002\000\004\070\236\001\002\000\104" +
    "\013\uff17\020\uff17\024\uff17\026\uff17\030\uff17\031\uff17\033" +
    "\uff17\034\uff17\041\uff17\042\uff17\043\uff17\050\uff17\051\uff17" +
    "\052\uff17\053\uff17\054\uff17\055\uff17\056\uff17\057\uff17\060" +
    "\uff17\061\uff17\062\uff17\063\uff17\067\uff17\070\uff17\071\uff17" +
    "\101\uff17\102\uff17\103\uff17\104\uff17\105\uff17\106\uff17\107" +
    "\uff17\001\002\000\054\013\uff73\020\uff73\024\uff73\026\uff73" +
    "\030\uff73\031\uff73\033\uff73\034\uff73\050\uff73\052\uff73\060" +
    "\uff73\061\uff73\062\uff73\071\uff73\101\uff73\102\uff73\103\uff73" +
    "\104\uff73\105\uff73\106\uff73\107\uff73\001\002\000\024\037" +
    "\ufeeb\040\ufeeb\047\ufeeb\051\ufeeb\053\ufeeb\054\ufeeb\071\ufeeb" +
    "\073\ufeeb\077\ufeeb\001\002\000\024\037\175\040\173\047" +
    "\161\051\165\053\070\054\051\071\010\073\ufede\077\061" +
    "\001\002\000\024\037\ufeea\040\ufeea\047\ufeea\051\ufeea\053" +
    "\ufeea\054\ufeea\071\ufeea\073\ufeea\077\ufeea\001\002\000\024" +
    "\037\ufee9\040\ufee9\047\ufee9\051\ufee9\053\ufee9\054\ufee9\071" +
    "\ufee9\073\ufee9\077\ufee9\001\002\000\062\013\uff71\020\uff71" +
    "\024\uff71\026\uff71\030\uff71\031\uff71\033\uff71\034\uff71\042" +
    "\243\050\uff71\052\uff71\053\242\054\240\060\uff71\061\uff71" +
    "\062\uff71\071\uff71\101\uff71\102\uff71\103\uff71\104\uff71\105" +
    "\uff71\106\uff71\107\uff71\001\002\000\054\013\uff72\020\uff72" +
    "\024\uff72\026\uff72\030\uff72\031\uff72\033\uff72\034\uff72\050" +
    "\uff72\052\uff72\060\uff72\061\uff72\062\uff72\071\uff72\101\uff72" +
    "\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72\001" +
    "\002\000\104\013\uff52\020\uff52\024\uff52\026\uff52\030\uff52" +
    "\031\uff52\033\uff52\034\uff52\041\uff52\042\uff52\043\uff52\050" +
    "\uff52\051\uff52\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52" +
    "\057\uff52\060\uff52\061\uff52\062\uff52\063\uff52\067\uff52\070" +
    "\uff52\071\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105\uff52" +
    "\106\uff52\107\uff52\001\002\000\004\071\010\001\002\000" +
    "\104\013\uff59\020\uff59\024\uff59\026\uff59\030\uff59\031\uff59" +
    "\033\uff59\034\uff59\041\uff59\042\uff59\043\uff59\050\uff59\051" +
    "\uff59\052\uff59\053\uff59\054\uff59\055\uff59\056\uff59\057\uff59" +
    "\060\uff59\061\uff59\062\uff59\063\uff59\067\uff59\070\uff59\071" +
    "\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59" +
    "\107\uff59\001\002\000\104\013\uff12\020\uff12\024\uff12\026" +
    "\uff12\030\uff12\031\uff12\033\uff12\034\uff12\041\uff12\042\uff12" +
    "\043\uff12\050\uff12\051\uff12\052\uff12\053\uff12\054\uff12\055" +
    "\uff12\056\uff12\057\uff12\060\uff12\061\uff12\062\uff12\063\uff12" +
    "\067\uff12\070\uff12\071\uff12\101\uff12\102\uff12\103\uff12\104" +
    "\uff12\105\uff12\106\uff12\107\uff12\001\002\000\074\013\uff55" +
    "\020\uff55\024\uff55\026\uff55\030\uff55\031\uff55\033\uff55\034" +
    "\uff55\041\uff55\042\uff55\043\uff55\050\uff55\052\uff55\053\uff55" +
    "\054\uff55\055\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062" +
    "\uff55\071\uff55\101\uff55\102\uff55\103\uff55\104\uff55\105\uff55" +
    "\106\uff55\107\uff55\001\002\000\074\013\uff54\020\uff54\024" +
    "\uff54\026\uff54\030\uff54\031\uff54\033\uff54\034\uff54\041\uff54" +
    "\042\uff54\043\uff54\050\uff54\052\uff54\053\uff54\054\uff54\055" +
    "\uff54\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\071\uff54" +
    "\101\uff54\102\uff54\103\uff54\104\uff54\105\uff54\106\uff54\107" +
    "\uff54\001\002\000\024\037\ufede\040\ufede\047\ufede\051\ufede" +
    "\053\070\054\051\071\010\073\ufede\077\ufede\001\002\000" +
    "\030\013\uff0e\026\uff0e\034\uff0e\047\uff0e\050\uff12\051\uff12" +
    "\061\uff0e\062\uff12\063\uff12\067\uff12\070\uff12\001\002\000" +
    "\006\050\uff7a\062\uff7a\001\002\000\006\050\uff7e\062\270" +
    "\001\002\000\006\050\uff7b\062\uff7b\001\002\000\006\050" +
    "\uff79\062\uff79\001\002\000\014\050\uff14\051\uff13\062\uff14" +
    "\063\uff16\070\uff19\001\002\000\006\050\uff7d\062\uff7d\001" +
    "\002\000\006\050\uff7c\062\uff7c\001\002\000\006\050\uff77" +
    "\062\uff77\001\002\000\006\050\uff78\062\uff78\001\002\000" +
    "\004\050\273\001\002\000\024\037\ufede\040\ufede\047\ufede" +
    "\051\ufede\053\070\054\051\071\010\073\ufede\077\ufede\001" +
    "\002\000\006\050\uff7e\062\270\001\002\000\004\050\uff7f" +
    "\001\002\000\074\013\uff80\020\uff80\024\uff80\026\uff80\030" +
    "\uff80\031\uff80\033\uff80\034\uff80\041\uff80\042\uff80\043\uff80" +
    "\050\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057" +
    "\uff80\060\uff80\061\uff80\062\uff80\071\uff80\101\uff80\102\uff80" +
    "\103\uff80\104\uff80\105\uff80\106\uff80\107\uff80\001\002\000" +
    "\024\037\175\040\173\047\161\051\165\053\070\054\051" +
    "\071\010\073\ufede\077\061\001\002\000\074\013\uff63\020" +
    "\uff63\024\uff63\026\uff63\030\uff63\031\uff63\033\uff63\034\uff63" +
    "\041\uff63\042\uff63\043\uff63\050\uff63\052\uff63\053\uff63\054" +
    "\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63\062\uff63" +
    "\071\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105\uff63\106" +
    "\uff63\107\uff63\001\002\000\004\052\301\001\002\000\006" +
    "\052\uff04\062\230\001\002\000\004\052\uff57\001\002\000" +
    "\074\013\uff58\020\uff58\024\uff58\026\uff58\030\uff58\031\uff58" +
    "\033\uff58\034\uff58\041\uff58\042\uff58\043\uff58\050\uff58\052" +
    "\uff58\053\uff58\054\uff58\055\uff58\056\uff58\057\uff58\060\uff58" +
    "\061\uff58\062\uff58\071\uff58\101\uff58\102\uff58\103\uff58\104" +
    "\uff58\105\uff58\106\uff58\107\uff58\001\002\000\004\050\303" +
    "\001\002\000\074\013\uff65\020\uff65\024\uff65\026\uff65\030" +
    "\uff65\031\uff65\033\uff65\034\uff65\041\uff65\042\uff65\043\uff65" +
    "\050\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057" +
    "\uff65\060\uff65\061\uff65\062\uff65\071\uff65\101\uff65\102\uff65" +
    "\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65\001\002\000" +
    "\024\037\ufede\040\ufede\047\ufede\051\ufede\053\070\054\051" +
    "\071\ufede\073\ufede\077\ufede\001\002\000\004\071\uff1f\001" +
    "\002\000\004\071\uff1d\001\002\000\004\071\uff1a\001\002" +
    "\000\004\020\311\001\002\000\014\053\070\054\051\071" +
    "\ufede\073\ufede\077\061\001\002\000\010\013\uff27\050\uff27" +
    "\061\325\001\002\000\006\060\uff84\062\321\001\002\000" +
    "\004\060\315\001\002\000\004\047\316\001\002\000\010" +
    "\035\133\050\uff34\071\010\001\002\000\004\050\320\001" +
    "\002\000\010\013\uff23\050\uff23\061\uff23\001\002\000\014" +
    "\053\070\054\051\071\ufede\073\ufede\077\061\001\002\000" +
    "\004\060\uff86\001\002\000\006\060\uff84\062\321\001\002" +
    "\000\004\060\uff85\001\002\000\014\053\070\054\051\071" +
    "\ufede\073\ufede\077\061\001\002\000\010\013\uff29\050\uff29" +
    "\061\uff29\001\002\000\010\013\uff27\050\uff27\061\325\001" +
    "\002\000\010\013\uff28\050\uff28\061\uff28\001\002\000\032" +
    "\016\057\017\uff45\044\uff45\045\uff45\046\uff45\047\064\053" +
    "\070\054\051\070\055\071\010\073\ufede\077\061\001\002" +
    "\000\010\013\uff2a\050\uff2a\061\uff2a\001\002\000\006\013" +
    "\uff35\050\uff35\001\002\000\006\013\uff31\050\uff31\001\002" +
    "\000\010\013\uff2d\050\uff2d\061\uff2d\001\002\000\004\071" +
    "\010\001\002\000\010\013\uff2b\050\uff2b\061\336\001\002" +
    "\000\010\013\uff2c\050\uff2c\061\uff2c\001\002\000\010\013" +
    "\uff33\050\uff33\061\uff33\001\002\000\004\035\133\001\002" +
    "\000\010\013\uff2f\050\uff2f\061\uff2f\001\002\000\032\016" +
    "\057\017\uff45\044\uff45\045\uff45\046\uff45\047\064\053\070" +
    "\054\051\070\055\071\010\073\ufede\077\061\001\002\000" +
    "\010\013\uff39\050\uff39\061\uff39\001\002\000\010\013\uff3a" +
    "\050\uff3a\061\uff3a\001\002\000\016\047\064\053\070\054" +
    "\051\071\ufede\073\ufede\077\061\001\002\000\006\052\uff3d" +
    "\060\uff3d\001\002\000\006\052\uff3e\060\352\001\002\000" +
    "\016\047\064\053\070\054\051\071\ufede\073\ufede\077\061" +
    "\001\002\000\004\052\354\001\002\000\004\020\355\001" +
    "\002\000\032\016\057\017\uff45\044\uff45\045\uff45\046\uff45" +
    "\047\064\053\070\054\051\070\055\071\010\073\ufede\077" +
    "\061\001\002\000\010\013\uff3c\050\uff3c\061\uff3c\001\002" +
    "\000\010\013\uff40\050\uff40\061\uff40\001\002\000\006\052" +
    "\uff3e\060\352\001\002\000\004\052\uff3f\001\002\000\032" +
    "\016\057\017\uff45\044\uff45\045\uff45\046\uff45\047\064\053" +
    "\070\054\051\070\055\071\010\073\ufede\077\061\001\002" +
    "\000\010\013\uff37\050\uff37\061\uff37\001\002\000\010\013" +
    "\uff38\050\uff38\061\uff38\001\002\000\004\050\366\001\002" +
    "\000\014\013\uff4b\050\uff4b\052\uff4b\060\uff4b\061\uff4b\001" +
    "\002\000\010\013\uff36\050\uff36\061\uff36\001\002\000\014" +
    "\053\070\054\051\071\ufede\073\ufede\077\061\001\002\000" +
    "\014\013\uff48\050\uff48\052\uff48\060\uff48\061\uff48\001\002" +
    "\000\014\013\uff4a\050\uff4a\052\uff4a\060\uff4a\061\uff4a\001" +
    "\002\000\004\071\010\001\002\000\010\012\uffe1\014\u0101" +
    "\015\u0105\001\002\000\010\012\uffe6\014\uffe6\015\uffe6\001" +
    "\002\000\004\061\u015a\001\002\000\004\061\uffdf\001\002" +
    "\000\004\061\u0156\001\002\000\004\071\010\001\002\000" +
    "\004\061\u014e\001\002\000\004\061\u014b\001\002\000\004" +
    "\061\uffe0\001\002\000\004\071\010\001\002\000\004\012" +
    "\ufffb\001\002\000\004\012\uffe3\001\002\000\004\061\u0109" +
    "\001\002\000\010\012\uffe1\014\u0101\015\u0105\001\002\000" +
    "\004\012\uffe2\001\002\000\010\047\u010f\060\uffc9\061\uff0d" +
    "\001\002\000\004\061\uffce\001\002\000\004\060\u0148\001" +
    "\002\000\010\050\uffca\060\uffca\061\uffca\001\002\000\012" +
    "\010\u0117\014\u0114\015\u0119\071\010\001\002\000\004\050" +
    "\uffc8\001\002\000\004\050\uffc5\001\002\000\004\050\uffc6" +
    "\001\002\000\004\050\uffc1\001\002\000\004\071\010\001" +
    "\002\000\004\050\uffc7\001\002\000\004\050\uffc2\001\002" +
    "\000\004\071\010\001\002\000\004\060\u011d\001\002\000" +
    "\004\071\010\001\002\000\004\050\u011b\001\002\000\010" +
    "\050\uffcd\060\uffcd\061\uffcd\001\002\000\006\047\u010f\060" +
    "\uffc9\001\002\000\010\016\u0124\017\u0120\071\010\001\002" +
    "\000\004\050\uffc4\001\002\000\004\050\uffbe\001\002\000" +
    "\004\051\u0138\001\002\000\004\050\uffc0\001\002\000\004" +
    "\050\uffbf\001\002\000\004\050\uffbd\001\002\000\004\017" +
    "\u0125\001\002\000\004\051\u0126\001\002\000\006\071\010" +
    "\073\u012a\001\002\000\006\052\uffb6\061\uffb6\001\002\000" +
    "\004\052\u0135\001\002\000\004\064\u0132\001\002\000\004" +
    "\064\u012c\001\002\000\006\052\uffb5\061\uffb5\001\002\000" +
    "\004\073\u012d\001\002\000\010\052\uffb1\060\u012f\061\uffb1" +
    "\001\002\000\006\052\uffb3\061\uffb3\001\002\000\004\071" +
    "\010\001\002\000\006\052\uffb2\061\uffb2\001\002\000\006" +
    "\052\uffb0\061\uffb0\001\002\000\004\071\010\001\002\000" +
    "\010\052\uffb1\060\u012f\061\uffb1\001\002\000\006\052\uffb4" +
    "\061\uffb4\001\002\000\004\020\u0136\001\002\000\004\071" +
    "\010\001\002\000\004\050\uffbc\001\002\000\006\071\010" +
    "\073\u012a\001\002\000\006\052\uffb9\061\u013a\001\002\000" +
    "\006\071\010\073\u012a\001\002\000\004\052\u013c\001\002" +
    "\000\004\020\u013d\001\002\000\010\016\u0124\017\u0120\071" +
    "\010\001\002\000\004\050\uffb8\001\002\000\004\050\uffb7" +
    "\001\002\000\004\050\uffbb\001\002\000\006\052\uffb9\061" +
    "\u013a\001\002\000\004\052\uffba\001\002\000\004\060\u0144" +
    "\001\002\000\010\016\u0124\017\u0120\071\010\001\002\000" +
    "\004\050\uffc3\001\002\000\006\047\u010f\050\uffc9\001\002" +
    "\000\006\050\uffd2\061\uffd2\001\002\000\004\071\010\001" +
    "\002\000\006\050\uffd0\061\uffd0\001\002\000\006\050\uffd1" +
    "\061\uffd1\001\002\000\020\005\023\006\ufff6\007\ufff6\010" +
    "\ufff6\012\ufff6\014\ufff6\015\ufff6\001\002\000\004\061\uffdc" +
    "\001\002\000\004\061\uffdb\001\002\000\024\005\023\006" +
    "\ufff6\007\ufff6\010\ufff6\011\u014f\012\ufff6\014\ufff6\015\ufff6" +
    "\021\u0151\001\002\000\004\061\uffd6\001\002\000\004\061" +
    "\uffde\001\002\000\004\061\uffd3\001\002\000\004\061\uffdd" +
    "\001\002\000\004\061\uffd5\001\002\000\004\061\uffcf\001" +
    "\002\000\006\047\u010f\061\uffc9\001\002\000\024\005\023" +
    "\006\ufff6\007\ufff6\010\ufff6\011\u014f\012\ufff6\014\ufff6\015" +
    "\ufff6\021\u0151\001\002\000\004\061\uffda\001\002\000\004" +
    "\061\uffd7\001\002\000\004\061\uffd9\001\002\000\020\005" +
    "\023\006\ufff6\007\ufff6\010\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\001\002\000\004\061\uffd8\001\002\000\004\060\u0163\001" +
    "\002\000\004\061\u015e\001\002\000\012\012\uffe7\014\uffe7" +
    "\015\uffe7\071\010\001\002\000\010\012\uffe9\014\uffe9\015" +
    "\uffe9\001\002\000\004\061\u0161\001\002\000\012\012\uffe7" +
    "\014\uffe7\015\uffe7\071\010\001\002\000\010\012\uffe8\014" +
    "\uffe8\015\uffe8\001\002\000\032\016\057\017\uff45\044\uff45" +
    "\045\uff45\046\uff45\047\064\053\070\054\051\070\055\071" +
    "\010\073\ufede\077\061\001\002\000\004\061\uffe4\001\002" +
    "\000\004\101\u016c\001\002\000\004\061\u0167\001\002\000" +
    "\016\007\ufff3\010\ufff3\012\ufff3\014\ufff3\015\ufff3\071\010" +
    "\001\002\000\014\007\ufff5\010\ufff5\012\ufff5\014\ufff5\015" +
    "\ufff5\001\002\000\004\061\u016a\001\002\000\016\007\ufff3" +
    "\010\ufff3\012\ufff3\014\ufff3\015\ufff3\071\010\001\002\000" +
    "\014\007\ufff4\010\ufff4\012\ufff4\014\ufff4\015\ufff4\001\002" +
    "\000\014\053\070\054\051\071\ufede\073\ufede\077\061\001" +
    "\002\000\004\061\ufff0\001\002\000\036\012\u017b\013\uffa9" +
    "\022\uffa9\023\u0173\025\u0184\027\u0183\032\u0175\035\u017f\036" +
    "\u0178\053\070\054\051\061\uffa9\071\uffa9\073\ufede\001\002" +
    "\000\006\061\ufffc\063\ufffc\001\002\000\012\013\uffab\026" +
    "\uffab\034\uffab\061\uffab\001\002\000\010\013\uffad\026\uffad" +
    "\061\u01c6\001\002\000\012\013\uff8f\026\uff8f\034\uff8f\061" +
    "\uff8f\001\002\000\024\037\ufede\040\ufede\047\ufede\051\ufede" +
    "\053\070\054\051\071\ufede\073\ufede\077\ufede\001\002\000" +
    "\012\013\uff99\026\uff99\034\uff99\061\uff99\001\002\000\024" +
    "\037\ufede\040\ufede\047\ufede\051\ufede\053\070\054\051\071" +
    "\ufede\073\ufede\077\ufede\001\002\000\004\060\u01bc\001\002" +
    "\000\012\013\uff9e\026\uff9e\034\uff9e\061\uff9e\001\002\000" +
    "\004\071\010\001\002\000\016\013\uffa7\022\u01a5\026\uffa7" +
    "\034\uffa7\061\uffa7\071\010\001\002\000\012\013\uff9c\026" +
    "\uff9c\034\uff9c\061\uff9c\001\002\000\036\012\u017b\013\uffa9" +
    "\022\uffa9\023\u0173\025\u0184\027\u0183\032\u0175\035\u017f\036" +
    "\u0178\053\070\054\051\061\uffa9\071\uffa9\073\ufede\001\002" +
    "\000\012\013\uff97\026\uff97\034\uff97\061\uff97\001\002\000" +
    "\012\013\uff8e\026\uff8e\034\uff8e\061\uff8e\001\002\000\016" +
    "\013\ufef7\026\ufef7\034\ufef7\060\ufef7\061\ufef7\062\ufef7\001" +
    "\002\000\024\037\ufede\040\ufede\047\ufede\051\ufede\053\070" +
    "\054\051\071\ufede\073\ufede\077\ufede\001\002\000\012\013" +
    "\uff9b\026\uff9b\034\uff9b\061\uff9b\001\002\000\016\013\uff01" +
    "\026\uff01\034\uff01\060\uff01\061\uff01\062\uff01\001\002\000" +
    "\012\013\uff98\026\uff98\034\uff98\061\uff98\001\002\000\004" +
    "\071\010\001\002\000\036\012\u017b\022\uffa9\023\u0173\025" +
    "\u0184\026\uffa9\027\u0183\032\u0175\035\u017f\036\u0178\053\070" +
    "\054\051\061\uffa9\071\uffa9\073\ufede\001\002\000\004\013" +
    "\u0187\001\002\000\012\013\uff9d\026\uff9d\034\uff9d\061\uff9d" +
    "\001\002\000\006\061\uffd4\063\uffd4\001\002\000\004\026" +
    "\u0189\001\002\000\024\037\ufede\040\ufede\047\ufede\051\ufede" +
    "\053\070\054\051\071\ufede\073\ufede\077\ufede\001\002\000" +
    "\012\013\uff95\026\uff95\034\uff95\061\uff95\001\002\000\004" +
    "\067\uff10\001\002\000\004\067\u018d\001\002\000\024\037" +
    "\ufede\040\ufede\047\ufede\051\ufede\053\070\054\051\071\ufede" +
    "\073\ufede\077\ufede\001\002\000\006\030\u0190\031\u0192\001" +
    "\002\000\006\030\uff91\031\uff91\001\002\000\024\037\uff93" +
    "\040\uff93\047\uff93\051\uff93\053\uff93\054\uff93\071\uff93\073" +
    "\uff93\077\uff93\001\002\000\024\037\ufede\040\ufede\047\ufede" +
    "\051\ufede\053\070\054\051\071\ufede\073\ufede\077\ufede\001" +
    "\002\000\024\037\uff92\040\uff92\047\uff92\051\uff92\053\uff92" +
    "\054\uff92\071\uff92\073\uff92\077\uff92\001\002\000\004\024" +
    "\u0195\001\002\000\004\024\uff90\001\002\000\042\012\u017b" +
    "\013\uffa9\022\uffa9\023\u0173\025\u0184\026\uffa9\027\u0183\032" +
    "\u0175\034\uffa9\035\u017f\036\u0178\053\070\054\051\061\uffa9" +
    "\071\uffa9\073\ufede\001\002\000\012\013\uff94\026\uff94\034" +
    "\uff94\061\uff94\001\002\000\004\020\u0198\001\002\000\014" +
    "\053\070\054\051\071\ufede\073\ufede\077\061\001\002\000" +
    "\006\013\uff88\061\u019d\001\002\000\004\060\u019b\001\002" +
    "\000\036\012\u017b\013\uffa9\022\uffa9\023\u0173\025\u0184\027" +
    "\u0183\032\u0175\035\u017f\036\u0178\053\070\054\051\061\uffa9" +
    "\071\uffa9\073\ufede\001\002\000\006\013\uff87\061\uff87\001" +
    "\002\000\014\053\070\054\051\071\ufede\073\ufede\077\061" +
    "\001\002\000\006\013\uff30\061\334\001\002\000\004\013" +
    "\u01a0\001\002\000\012\013\uff8a\026\uff8a\034\uff8a\061\uff8a" +
    "\001\002\000\006\013\uff88\061\u019d\001\002\000\006\013" +
    "\uff89\061\uff89\001\002\000\004\013\u01a4\001\002\000\012" +
    "\013\uff9a\026\uff9a\034\uff9a\061\uff9a\001\002\000\010\053" +
    "\070\054\051\073\ufede\001\002\000\012\013\uffa6\026\uffa6" +
    "\034\uffa6\061\uffa6\001\002\000\012\013\uffa5\026\uffa5\034" +
    "\uffa5\061\uffa5\001\002\000\012\013\uffa4\026\uffa4\034\uffa4" +
    "\061\uffa4\001\002\000\012\051\uff13\063\uff16\067\uffa2\070" +
    "\uff19\001\002\000\004\067\u01b0\001\002\000\012\013\uffa8" +
    "\026\uffa8\034\uffa8\061\uffa8\001\002\000\004\067\uffa1\001" +
    "\002\000\012\013\uffac\026\uffac\034\uffac\061\uffac\001\002" +
    "\000\014\013\uff53\026\uff53\034\uff53\047\254\061\uff53\001" +
    "\002\000\012\013\uffa0\026\uffa0\034\uffa0\061\uffa0\001\002" +
    "\000\024\037\ufede\040\ufede\047\ufede\051\ufede\053\070\054" +
    "\051\071\ufede\073\ufede\077\ufede\001\002\000\012\013\uffa3" +
    "\026\uffa3\034\uffa3\061\uffa3\001\002\000\012\013\uff9f\026" +
    "\uff9f\034\uff9f\061\uff9f\001\002\000\010\024\uff81\062\u01b6" +
    "\063\247\001\002\000\014\024\uff16\051\uff13\062\uff16\063" +
    "\uff16\070\uff19\001\002\000\014\024\uff12\051\uff12\062\uff12" +
    "\063\uff12\070\uff12\001\002\000\004\071\010\001\002\000" +
    "\004\024\u01b8\001\002\000\042\012\u017b\013\uffa9\022\uffa9" +
    "\023\u0173\025\u0184\026\uffa9\027\u0183\032\u0175\034\uffa9\035" +
    "\u017f\036\u0178\053\070\054\051\061\uffa9\071\uffa9\073\ufede" +
    "\001\002\000\012\013\uff83\026\uff83\034\uff83\061\uff83\001" +
    "\002\000\010\024\uff81\062\u01b6\063\247\001\002\000\004" +
    "\024\uff82\001\002\000\016\013\uffaa\022\uffaa\026\uffaa\034" +
    "\uffaa\061\uffaa\071\uffaa\001\002\000\004\033\u01be\001\002" +
    "\000\042\012\u017b\013\uffa9\022\uffa9\023\u0173\025\u0184\026" +
    "\uffa9\027\u0183\032\u0175\034\uffa9\035\u017f\036\u0178\053\070" +
    "\054\051\061\uffa9\071\uffa9\073\ufede\001\002\000\012\013" +
    "\uff8c\026\uff8c\034\u01c0\061\uff8c\001\002\000\042\012\u017b" +
    "\013\uffa9\022\uffa9\023\u0173\025\u0184\026\uffa9\027\u0183\032" +
    "\u0175\034\uffa9\035\u017f\036\u0178\053\070\054\051\061\uffa9" +
    "\071\uffa9\073\ufede\001\002\000\012\013\uff8d\026\uff8d\034" +
    "\uff8d\061\uff8d\001\002\000\012\013\uff8b\026\uff8b\034\uff8b" +
    "\061\uff8b\001\002\000\004\024\u01c4\001\002\000\042\012" +
    "\u017b\013\uffa9\022\uffa9\023\u0173\025\u0184\026\uffa9\027\u0183" +
    "\032\u0175\034\uffa9\035\u017f\036\u0178\053\070\054\051\061" +
    "\uffa9\071\uffa9\073\ufede\001\002\000\012\013\uff96\026\uff96" +
    "\034\uff96\061\uff96\001\002\000\040\012\u017b\013\uffa9\022" +
    "\uffa9\023\u0173\025\u0184\026\uffa9\027\u0183\032\u0175\035\u017f" +
    "\036\u0178\053\070\054\051\061\uffa9\071\uffa9\073\ufede\001" +
    "\002\000\006\013\uffaf\026\uffaf\001\002\000\010\013\uffad" +
    "\026\uffad\061\u01c6\001\002\000\006\013\uffae\026\uffae\001" +
    "\002\000\006\061\ufff8\062\u01cb\001\002\000\010\053\070" +
    "\054\051\073\ufede\001\002\000\004\061\u01cd\001\002\000" +
    "\016\006\ufffa\007\ufffa\010\ufffa\012\ufffa\014\ufffa\015\ufffa" +
    "\001\002\000\006\061\ufff8\062\u01cb\001\002\000\004\061" +
    "\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ce\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\026\007\023\011\024\240\025\001\001" +
    "\000\004\042\006\001\001\000\004\220\011\001\001\000" +
    "\002\001\001\000\006\006\014\042\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\252\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\020\001\001" +
    "\000\002\001\001\000\004\252\021\001\001\000\002\001" +
    "\001\000\014\016\u01c9\177\u017d\202\u0180\207\071\210\073" +
    "\001\001\000\004\010\u016e\001\001\000\002\001\001\000" +
    "\006\012\031\241\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u0165\042\u0164\001\001\000\002\001" +
    "\001\000\006\013\033\242\034\001\001\000\002\001\001" +
    "\000\006\014\374\243\373\001\001\000\006\021\037\042" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\042\042\036\274\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\042\042\036\274\044\001\001" +
    "\000\002\001\001\000\040\020\052\041\053\042\051\046" +
    "\057\132\062\133\072\134\064\135\066\136\055\161\047" +
    "\205\046\206\061\207\071\210\070\225\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\051\046\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\364\042\013\001\001\000\002" +
    "\001\001\000\014\137\124\140\125\141\123\142\115\143" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\042\101\047\100\176\076\177\074\200\075\202\077\207" +
    "\071\210\073\244\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\203\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\217\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\202\113\207\071\210\073\001\001\000\002\001\001" +
    "\000\006\203\110\204\106\001\001\000\006\217\112\221" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\131\042" +
    "\013\150\126\151\134\152\133\153\130\163\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\227\340\001\001\000\004\261\334\001\001\000\004" +
    "\226\332\001\001\000\002\001\001\000\010\154\137\223" +
    "\136\224\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\051\046" +
    "\307\001\001\000\014\077\145\117\144\155\142\207\071" +
    "\210\143\001\001\000\002\001\001\000\004\222\304\001" +
    "\001\000\074\023\162\042\171\045\173\047\161\050\166" +
    "\051\167\076\204\131\200\164\165\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\176\212\177\074\200\075\202\077\205\170\206\061\207" +
    "\071\210\073\211\201\212\207\216\211\001\001\000\006" +
    "\126\151\233\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\117\157" +
    "\207\071\210\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\077\301\117\144\207\071\210" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\037\275\077\276\117\144\207\071\210" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\276" +
    "\273\001\001\000\006\104\252\232\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\127\240\271\236\001\001" +
    "\000\002\001\001\000\004\277\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\130\221" +
    "\270\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\023\162\042\171\045\173\047\161\050\166" +
    "\051\167\076\204\131\200\164\165\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\176\212\177\074\200\075\202\077\205\170\206\061\207" +
    "\071\210\073\212\222\216\211\001\001\000\006\130\221" +
    "\270\223\001\001\000\002\001\001\000\014\077\226\100" +
    "\225\117\144\207\071\210\143\001\001\000\002\001\001" +
    "\000\004\253\230\001\001\000\012\077\231\117\144\207" +
    "\071\210\143\001\001\000\002\001\001\000\004\253\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\023\162\042\171\045\173\047\161\050\166\051" +
    "\167\076\204\131\200\164\165\165\163\166\206\167\210" +
    "\170\176\171\202\172\205\173\175\174\177\175\203\176" +
    "\212\177\074\200\075\202\077\205\170\206\061\207\071" +
    "\210\073\211\243\212\207\216\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\127\240\271\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\250\051" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\023\162\042\254\044" +
    "\265\045\264\051\167\076\261\077\260\101\263\102\262" +
    "\103\256\105\257\106\255\117\144\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\207\071\210\143\216\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\257\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\023\162\042\254\044\265\045\264\051" +
    "\167\076\261\077\260\101\263\102\262\103\270\105\257" +
    "\106\255\117\144\165\163\166\206\167\210\170\176\171" +
    "\202\172\205\173\175\174\177\175\203\207\071\210\143" +
    "\216\211\001\001\000\004\257\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\023\162\042\171\045\173" +
    "\047\161\050\166\051\167\076\204\131\200\164\165\165" +
    "\163\166\206\167\210\170\176\171\202\172\205\173\175" +
    "\174\177\175\203\176\212\177\074\200\075\202\077\205" +
    "\170\206\061\207\071\210\073\212\274\216\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\253\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\077\306\117\144\207\071\210" +
    "\143\215\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\312\125" +
    "\313\156\311\205\046\206\061\207\071\210\070\001\001" +
    "\000\004\262\325\001\001\000\004\255\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\131\042\013" +
    "\150\126\151\134\152\316\153\130\163\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\322\205\046" +
    "\206\061\207\071\210\070\001\001\000\002\001\001\000" +
    "\004\255\323\001\001\000\002\001\001\000\020\020\312" +
    "\125\313\156\326\205\046\206\061\207\071\210\070\001" +
    "\001\000\002\001\001\000\004\262\327\001\001\000\002" +
    "\001\001\000\040\020\052\041\331\042\051\046\057\132" +
    "\062\133\072\134\064\135\066\136\055\161\047\205\046" +
    "\206\061\207\071\210\070\225\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\131\042\013\163\336\001\001\000\004\261" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\151\342\001\001\000\002\001\001\000\042\020\052\041" +
    "\344\042\051\046\057\132\062\133\072\134\064\135\066" +
    "\136\055\146\345\161\047\205\046\206\061\207\071\210" +
    "\070\225\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\052\132\347\135\066\136\055\144\350\161" +
    "\047\205\046\206\061\207\071\210\070\001\001\000\002" +
    "\001\001\000\004\267\352\001\001\000\026\020\052\132" +
    "\347\135\066\136\055\144\357\161\047\205\046\206\061" +
    "\207\071\210\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\020\052\041\355\042\051\046\057\132\062" +
    "\133\072\134\064\135\066\136\055\145\356\161\047\205" +
    "\046\206\061\207\071\210\070\225\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\267\360\001\001\000" +
    "\002\001\001\000\042\020\052\041\362\042\051\046\057" +
    "\132\062\133\072\134\064\135\066\136\055\147\363\161" +
    "\047\205\046\206\061\207\071\210\070\225\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\370\162\371" +
    "\205\046\206\061\207\071\210\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u015b\022\u015c\042\013" +
    "\001\001\000\024\015\u0105\024\u0103\025\u0101\027\u0102\030" +
    "\376\031\377\033\375\250\u0107\272\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\u0154\044\u0153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\u010a\045" +
    "\u010b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\u0103\025\u0101\027\u0102\030\376\031" +
    "\377\033\375\250\u0107\272\u0109\001\001\000\002\001\001" +
    "\000\006\036\u010d\237\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\u0117\025\u0115" +
    "\031\u0112\042\013\052\u0119\053\u010f\054\u0114\055\u0111\056" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0142\042\013" +
    "\001\001\000\002\001\001\000\004\042\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\u010d\237\u010c" +
    "\001\001\000\016\042\051\046\u0120\057\u011d\060\u0121\061" +
    "\u011e\062\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\042\u0128\063\u0127\064\u0126\065\u012a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\u012d\001" +
    "\001\000\002\001\001\000\010\042\051\046\u0130\067\u012f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\u0132\001\001\000\004\066\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\051\046\u0136\001\001\000" +
    "\002\001\001\000\012\042\u0128\063\u0138\064\u0126\065\u012a" +
    "\001\001\000\004\265\u013a\001\001\000\012\042\u0128\063" +
    "\u0140\064\u0126\065\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\042\051\046\u013d\060\u013e\061\u011e\062" +
    "\u0122\247\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\265\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\042\051\046\u0120\057\u0144" +
    "\060\u0121\061\u011e\062\u0122\001\001\000\002\001\001\000" +
    "\006\036\u010d\237\u0146\001\001\000\002\001\001\000\010" +
    "\040\u0149\042\051\046\u0148\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\u014c\007\023\011\024\026\u014b" +
    "\240\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\u014c\007\023\011\024\026\u014f\034\u0151\230\u0152" +
    "\240\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\u010d\237\u0146\001\001\000\020\004" +
    "\u0157\007\023\011\024\032\u0156\034\u0158\230\u0152\240\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\u0157\007\023\011\024\032\u015a\240\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\u015b\022\u015f\042\013\273\u015e\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\u015b\022" +
    "\u015f\042\013\273\u0161\001\001\000\002\001\001\000\040" +
    "\020\052\041\u0163\042\051\046\057\132\062\133\072\134" +
    "\064\135\066\136\055\161\047\205\046\206\061\207\071" +
    "\210\070\225\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\u0168\042\u0164\275\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0168\042\u0164\275\u016a\001\001\000\002\001\001\000\014" +
    "\020\u016c\205\046\206\061\207\071\210\070\001\001\000" +
    "\002\001\001\000\046\005\u0184\016\u0175\070\u0170\072\u016f" +
    "\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115" +
    "\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073" +
    "\236\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\264\u01c6\001\001\000\002\001\001\000\012\077\u01c2" +
    "\117\144\207\071\210\143\001\001\000\002\001\001\000" +
    "\012\077\u01bc\117\144\207\071\210\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\023\162\042\u01b4\051" +
    "\167\076\u01b3\165\163\166\206\167\210\170\176\171\202" +
    "\172\205\173\u01b2\174\177\175\203\216\211\001\001\000" +
    "\056\023\162\042\254\044\u01ad\045\u01ab\051\167\071\u01ac" +
    "\074\u01a6\075\u01a7\076\u01a8\121\u01a5\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\216\211\235\u01aa\246\u01a9\001\001\000\002\001\001\000" +
    "\046\005\u01a2\016\u0175\070\u0170\072\u016f\107\u0176\110\u0185" +
    "\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b\122\u0171\123" +
    "\u017c\177\u017d\202\u0180\207\071\210\073\236\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\077\u0196\117\144\207\071\210\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\u018b\042\u018a\001\001\000\046\005\u0187\016\u0175\070\u0170" +
    "\072\u016f\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114" +
    "\u0181\115\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071" +
    "\210\073\236\u0178\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\077\u0189" +
    "\117\144\207\071\210\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\077\u018e\116\u018d" +
    "\117\144\207\071\210\143\001\001\000\004\245\u0190\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\077\u0193" +
    "\117\144\120\u0192\207\071\210\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\016\u0175" +
    "\070\u0195\072\u016f\107\u0176\110\u0185\111\u0179\112\u017f\113" +
    "\u0173\114\u0181\115\u017b\122\u0171\123\u017c\177\u017d\202\u0180" +
    "\207\071\210\073\236\u0178\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\312\124\u0198\125\u0199\205\046" +
    "\206\061\207\071\210\070\001\001\000\004\263\u019d\001" +
    "\001\000\002\001\001\000\044\016\u0175\070\u019b\072\u016f" +
    "\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115" +
    "\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073" +
    "\236\u0178\001\001\000\002\001\001\000\020\020\312\124" +
    "\u01a0\125\u0199\205\046\206\061\207\071\210\070\001\001" +
    "\000\004\226\u019e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\263\u01a1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\u01b1\177\u017d\202" +
    "\u0180\207\071\210\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\104\252\232\u01ae\001\001\000\002\001\001\000" +
    "\012\077\u01b0\117\144\207\071\210\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\256\u01b6\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\023\162\042\u01b4" +
    "\051\167\076\u01b3\165\163\166\206\167\210\170\176\171" +
    "\202\172\205\173\u01b9\174\177\175\203\216\211\001\001" +
    "\000\002\001\001\000\044\016\u0175\070\u01b8\072\u016f\107" +
    "\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b" +
    "\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073\236" +
    "\u0178\001\001\000\002\001\001\000\004\256\u01ba\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\016\u0175\070\u01be\072\u016f\107\u0176\110\u0185\111\u0179" +
    "\112\u017f\113\u0173\114\u0181\115\u017b\122\u0171\123\u017c\177" +
    "\u017d\202\u0180\207\071\210\073\236\u0178\001\001\000\004" +
    "\234\u01c0\001\001\000\044\016\u0175\070\u01c1\072\u016f\107" +
    "\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b" +
    "\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073\236" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\016\u0175\070\u01c4\072\u016f\107\u0176\110" +
    "\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b\122\u0171" +
    "\123\u017c\177\u017d\202\u0180\207\071\210\073\236\u0178\001" +
    "\001\000\002\001\001\000\044\016\u0175\070\u01c7\072\u016f" +
    "\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115" +
    "\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073" +
    "\236\u0178\001\001\000\002\001\001\000\004\264\u01c8\001" +
    "\001\000\002\001\001\000\004\260\u01cb\001\001\000\014" +
    "\016\u01cd\177\u017d\202\u0180\207\071\210\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\260\u01ce\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	System.out.println("IDENTIFIER: "+id);
	if(id != null) { 
		RESULT = id.toString();
	} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // string_character ::= STRINGCHARACTER 
            {
              Object RESULT =null;
		int strterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(strter != null) {RESULT = strter.toString();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_character",132, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // sign_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign_optional",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // sign_optional ::= sign 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(s!= null) {RESULT = s;}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign_optional",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // sign ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",133, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // sign ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",133, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // letter ::= LETTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("letter",138, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // string ::= string_character 
            {
              Object RESULT =null;
		int strchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strchright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strch = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(strch != null) {RESULT = strch.toString();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // multiplication_operator ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("and", "boolean", "and" , (int) and); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // multiplication_operator ::= MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("mod", "arithmetic", "mod" , (int) mod); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // multiplication_operator ::= DIVEXTENSION 
            {
              Object RESULT =null;
		int divextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int divextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object divext = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("divext", "arithmetic", "div" , (int) divext); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // multiplication_operator ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("div", "arithmetic", "/" , (int) div); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // multiplication_operator ::= TIMES 
            {
              Object RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("times", "arithmetic", "*" , (int) times); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // addition_operator ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("or", "boolean", "or" , (int) or); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition_operator",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // addition_operator ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition_operator",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // addition_operator ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition_operator",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // relational_operator ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("in", "boolean", "in" , (int) in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // relational_operator ::= GREATERTHENEQUALS 
            {
              Object RESULT =null;
		int gteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthenequals", "boolean", ">=" , (int) gte); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // relational_operator ::= GREATERTHEN 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthen", "boolean", ">" , (int) gt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // relational_operator ::= LESSTHENEQUALS 
            {
              Object RESULT =null;
		int lteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lte = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("lessthenequals", "boolean", "<=" , (int) lte); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // relational_operator ::= LESSTHEN 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("lessthen", "boolean", "<" , (int) lt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // relational_operator ::= DIFF 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("diff", "boolean", "<>" , (int) d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // relational_operator ::= EQUALS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Objeto("equals", "boolean", "=" , (int) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // constant_identifier_or_number ::= number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",162, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // constant_identifier_or_number ::= constant_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",162, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // constant ::= string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // constant ::= sign_optional constant_identifier_or_number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // label ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(in!= null) {RESULT = in;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // digit_sequence ::= sign_optional unsigned_digit_sequence 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int undigitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int undigitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object undigit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if(undigit != null) {
		if(so != null){
			RESULT = so.toString() + undigit.toString();
		} else {
			RESULT = undigit.toString();
		}
	}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("digit_sequence",128, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // unsigned_digit_sequence_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // unsigned_digit_sequence_optional ::= unsigned_digit_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // unsigned_digit_sequence ::= DIGITSEQUENCE 
            {
              Object RESULT =null;
		int digitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int digitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object digit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(digit!= null) {RESULT = digit;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // scale_factor_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // scale_factor_optional ::= scale_factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // scale_factor ::= SCALEFACTOR digit_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scale_factor",141, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // real_number ::= digit_sequence scale_factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("real_number",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // real_number ::= digit_sequence DOT unsigned_digit_sequence_optional scale_factor_optional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("real_number",126, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // integer_number ::= digit_sequence 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(ds!= null) {RESULT = ds;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer_number",125, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // number ::= real_number 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(rn!= null) {RESULT = "real";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // number ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(in!= null) {RESULT = "integer";} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",124, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // comma_expression ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_expression",169, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // comma_expression ::= COMMA expression comma_expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(ex != null) {System.out.println("expression: " + ex);
																SemanticManager.getInstance().lineError = (int) ex;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_expression",169, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // comma_identifier ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",168, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // comma_identifier ::= COMMA identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(id != null) {System.out.println("identifier: " + id);
																SemanticManager.getInstance().addIdentifier(id.toString());} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",168, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // comma_variable ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_variable",167, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // comma_variable ::= COMMA variable comma_variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(var != null) {System.out.println("variable: " + var);
																SemanticManager.getInstance().addIdentifier(var.toString());
																SemanticManager.getInstance().addVariable(var.toString(), ((Objeto) var).getTipo(), ((Objeto) var).getValor().toString());} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_variable",167, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expression_list ::= expression comma_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // identifier_list ::= identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(id != null){
															System.out.println("identifier: " + id);
															SemanticManager.getInstance().addIdentifier(id.toString());
														}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // bound_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("bound variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bound_identifier",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // function_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("function variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_identifier",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // procedure_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("procedure variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_identifier",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // type_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("type variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , 0);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_identifier",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // variable_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("variable identifier: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_identifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // constant_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("constant variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // field_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("field variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_identifier",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // array_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("array variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_variable",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // actual_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("actual variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_variable",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // pointer_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("pointer variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer_variable",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // record_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("record variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_variable",121, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // referenced_variable ::= pointer_variable NT$1 CIRCUNFLEX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referenced_variable",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$1 ::= 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("referenced variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",189, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // file_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("file variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var ,  -1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_variable",122, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // fraction_length ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fraction_length",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // field_width ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_width",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // colon_fraction_length ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",144, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // colon_fraction_length ::= COLON fraction_length 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",144, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // semi_colon_field_width ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_field_width",145, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // semi_colon_field_width ::= SEMICOLON field_width colon_fraction_length 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_field_width",145, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // output_value ::= expression semi_colon_field_width 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_value",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // comma_output_value ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",170, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // comma_output_value ::= COMMA output_value comma_output_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",170, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // variant ::= case_label_list COLON LPARENT field_list RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // identifier_colon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",146, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // identifier_colon ::= semi_colon_field_width 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",146, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // tag_field ::= identifier_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag_field",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // semi_colon_variant ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant",176, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // semi_colon_variant ::= SEMICOLON variant semi_colon_variant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant",176, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // variant_part ::= CASE tag_field type_identifier OF variant semi_colon_variant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant_part",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // record_section ::= identifier_list COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_section",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // semi_colon_record_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_record_section",175, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // semi_colon_record_section ::= SEMICOLON record_section semi_colon_record_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_record_section",175, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // fixed_part ::= record_section semi_colon_record_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fixed_part",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // semi_colon_variant_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant_part",149, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // semi_colon_variant_part ::= SEMICOLON variant_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant_part",149, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // semi_colon_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_optional",148, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // semi_colon_optional ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_optional",148, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // field_list_aux ::= variant_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // field_list_aux ::= fixed_part semi_colon_variant_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // field_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // field_list ::= field_list_aux semi_colon_optional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // pointer_type ::= CIRCUNFLEX type_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer_type",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // file_component_type ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_component_type",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // file_type ::= FILE OF file_component_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_type",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // base_type ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_type",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // set_type ::= SET OF base_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // record_type ::= RECORD field_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // element_type ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_type",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // index_type ::= simple_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_type",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // colon_index_type ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",181, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // colon_index_type ::= COLON index_type colon_index_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",181, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // array_type ::= ARRAY LBRACKET index_type colon_index_type RBRACKET OF element_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // unpacked_structured_type ::= file_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unpacked_structured_type ::= set_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // unpacked_structured_type ::= record_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // unpacked_structured_type ::= array_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // packed_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("packed_optional",147, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // packed_optional ::= PACKED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("packed_optional",147, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // structured_type ::= packed_optional unpacked_structured_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_type",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // upper_bound ::= constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("upper_bound",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // lower_bound ::= constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lower_bound",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // subrange_type ::= lower_bound DOUBLEDOT upper_bound 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subrange_type",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // enumerated_type ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // simple_type ::= enumerated_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // simple_type ::= subrange_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // type ::= type_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // type ::= pointer_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // type ::= structured_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // type ::= simple_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // file_buffer ::= file_variable CIRCUNFLEX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_buffer",140, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // actual_parameter_list_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list_optional",152, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // actual_parameter_list_optional ::= actual_parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list_optional",152, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // function_designator ::= function_identifier actual_parameter_list_optional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_designator",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // element_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // element_list ::= expression comma_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // set ::= LBRACKET element_list RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // field_designator ::= record_variable DOT field_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_designator",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // indexed_variable ::= array_variable LBRACKET expression_list RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexed_variable",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // component_variable ::= file_buffer 
            {
              Object RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(fb != null) {RESULT = fb;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_variable",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // component_variable ::= field_designator 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(fd != null) {RESULT = fd;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_variable",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // component_variable ::= indexed_variable 
            {
              Object RESULT =null;
		int ivleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ivright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(iv != null) {RESULT = iv;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_variable",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // entire_variable ::= field_identifier 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(fi != null) {RESULT = fi;}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entire_variable",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // entire_variable ::= variable_identifier 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(vi != null) {RESULT = vi;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entire_variable",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // variable ::= referenced_variable 
            {
              Object RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(rv != null) {System.out.println("referenced variable: " + rv); RESULT = rv;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // variable ::= component_variable 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(cv != null) {System.out.println("component variable : " + cv); RESULT = cv;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // variable ::= entire_variable 
            {
              Object RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(ev != null) {System.out.println("entire variable: " + ev); RESULT = ev;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // factor ::= NOT NT$0 factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$0 ::= 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = new Objeto("not", "boolean", "not" , (int) not); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",188, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // factor ::= LPARENT expression RPARENT 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(exp != null) { RESULT = exp; } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // factor ::= function_designator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // factor ::= bound_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // factor ::= constant_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // factor ::= NIL 
            {
              Object RESULT =null;
		 RESULT = "nil"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // factor ::= set 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // factor ::= string 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(str != null) { RESULT = "string"; } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // factor ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(n != null) { RESULT = n;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // factor ::= variable 
            {
              Object RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(vari != null) { RESULT = vari;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // multiplication_operator_factor ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator_factor",182, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // multiplication_operator_factor ::= multiplication_operator factor multiplication_operator_factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator_factor",182, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // term ::= factor multiplication_operator_factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",135, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // addition_operator_term ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition_operator_term",183, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // addition_operator_term ::= addition_operator term addition_operator_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addition_operator_term",183, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // simple_expression ::= sign_optional term addition_operator_term 
            {
              Object RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // relational_operator_simple_expression ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator_simple_expression",153, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // relational_operator_simple_expression ::= relational_operator simple_expression 
            {
              Object RESULT =null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("RELOP: " + ((Objeto) relop).getId()); 
															if(relop != null){ 
																SemanticManager.getInstance().lineError = ((Objeto) relop).getLineError();
															} if(sexp != null){ 
																SemanticManager.getInstance().checkBooleanExpression(sexp.toString());
															} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_operator_simple_expression",153, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= simple_expression relational_operator_simple_expression 
            {
              Object RESULT =null;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relopseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relopseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object relopse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	if(sexp != null){
		RESULT = sexp;
		
	} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // actual_function ::= function_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_function",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // actual_procedure ::= procedure_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_procedure",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // actual_value ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_value",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // actual_parameter ::= actual_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // actual_parameter ::= actual_procedure 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // actual_parameter ::= actual_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // actual_parameter ::= actual_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comma_actual_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_actual_parameter",173, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // comma_actual_parameter ::= COMMA actual_parameter comma_actual_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_actual_parameter",173, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // actual_parameter_list ::= LPARENT actual_parameter comma_actual_parameter RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // comma_record_variable ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_record_variable",172, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // comma_record_variable ::= COMMA record_variable comma_record_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_record_variable",172, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // with_statement ::= WITH record_variable comma_record_variable DO statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_statement",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // comma_constant ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_constant",171, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // comma_constant ::= COMMA constant comma_constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_constant",171, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // case_label_list ::= constant comma_constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_label_list",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // case_limb ::= case_label_list COLON statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_limb",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // semi_colon_case_limb ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_case_limb",177, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // semi_colon_case_limb ::= SEMICOLON case_limb semi_colon_case_limb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_case_limb",177, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case_statement ::= CASE expression OF case_limb semi_colon_case_limb semi_colon_optional END 
            {
              Object RESULT =null;
		int casestmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int casestmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object casestm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 System.out.println("CASE: " + exp); 
																						if(casestm != null){ 
																							SemanticManager.getInstance().lineError = ((int) casestm);
																						} if(exp != null) {
																							SemanticManager.getInstance().checkIfThenElseExpression(exp.toString());
																							RESULT = exp;
																						} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_statement_optional ::= ELSE statement 
            {
              Object RESULT =null;
		int elsestmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsestmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elsestm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("ELSE: " + stm); 
															if(elsestm != null){ 
																SemanticManager.getInstance().lineError = ((int) elsestm);
															} if(stm != null){ 
																SemanticManager.getInstance().checkIfThenElseExpression(stm.toString());
																RESULT = stm;
															} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement_optional",154, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_statement_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement_optional",154, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_statement ::= IF expression THEN statement else_statement_optional 
            {
              Object RESULT =null;
		int ifstmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ifstmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ifstm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("IF: " + exp); 
															if(ifstm != null){ 
																SemanticManager.getInstance().lineError = ((int) ifstm);
															} if(exp != null) {	
																SemanticManager.getInstance().checkIfThenElseExpression(exp.toString());
																RESULT = exp;
															}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // conditional_statement ::= case_statement 
            {
              Object RESULT =null;
		int casestmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casestmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object casestm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(casestm != null) {RESULT = casestm;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_statement",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // conditional_statement ::= if_statement 
            {
              Object RESULT =null;
		int ifstmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifstmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ifstm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(ifstm != null) {RESULT = ifstm;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_statement",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // final_expression ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_expression",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // initial_expression ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_expression",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // to_or_downto ::= DOWNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("to_or_downto",163, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // to_or_downto ::= TO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("to_or_downto",163, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_statement ::= FOR variable_identifier ASSIGMENT initial_expression to_or_downto final_expression DO statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // repeat_statement ::= REPEAT statement_sequence UNTIL expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while_statement ::= WHILE expression DO statement 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("WHILE: " + expw); 
															if(w != null){ 
																SemanticManager.getInstance().lineError = ((int) w);
															} if(expw != null){ 
																SemanticManager.getInstance().checkWhileExpression(expw.toString());
															} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // repetitive_statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetitive_statement",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // repetitive_statement ::= repeat_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetitive_statement",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // repetitive_statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetitive_statement",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // compound_statement ::= BEGIN statement_sequence END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // structured_statement ::= with_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // structured_statement ::= conditional_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // structured_statement ::= repetitive_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // structured_statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // goto_statement ::= GOTO label 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("goto_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // procedure_statement ::= procedure_identifier actual_parameter_list_optional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable_or_function_identifier ::= function_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_or_function_identifier",164, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable_or_function_identifier ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_or_function_identifier",164, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment_statement ::= variable_or_function_identifier ASSIGMENT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_statement_optional ::= goto_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement_optional",155, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_statement_optional ::= procedure_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement_optional",155, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_statement_optional ::= assignment_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement_optional",155, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_statement ::= simple_statement_optional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // label_colon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_colon",156, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // label_colon ::= label COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_colon",156, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= structured_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= label_colon simple_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // semi_colon_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_statement",178, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // semi_colon_statement ::= SEMICOLON statement semi_colon_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_statement",178, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement_sequence ::= statement semi_colon_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ordinal_type_identifier ::= type_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ordinal_type_identifier_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_optional",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ordinal_type_identifier_optional ::= COLON ordinal_type_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_optional",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bound_digit_sequence_production ::= DIGITSEQUENCE DOUBLEDOT DIGITSEQUENCE ordinal_type_identifier_optional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bound_digit_sequence_production",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bound_identifier_production ::= identifier DOUBLEDOT identifier ordinal_type_identifier_optional 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(id != null && id1 !=null){
															System.out.println("identifier:id: " + id);
															System.out.println("identifier:id: " + id1);
															SemanticManager.getInstance().addIdentifier(id.toString());
															SemanticManager.getInstance().addIdentifier(id1.toString());
														}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bound_identifier_production",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bound_specification ::= bound_digit_sequence_production 
            {
              Object RESULT =null;
		int bdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(bds != null) { RESULT = bds;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bound_specification",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bound_specification ::= bound_identifier_production 
            {
              Object RESULT =null;
		int bipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(bip != null) { RESULT = bip;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bound_specification",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type_identifier_or_conformant_array_schema ::= conformant_array_schema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_identifier_or_conformant_array_schema",165, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_identifier_or_conformant_array_schema ::= type_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_identifier_or_conformant_array_schema",165, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // semi_colon_bound_specification ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_bound_specification",179, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // semi_colon_bound_specification ::= SEMICOLON bound_specification semi_colon_bound_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_bound_specification",179, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unpacked_conformant_array_schema ::= ARRAY LBRACKET bound_specification semi_colon_bound_specification RBRACKET OF type_identifier_or_conformant_array_schema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unpacked_conformant_array_schema",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // packed_conformant_array_schema ::= PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object bs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(pc != null){
		SemanticManager.getInstance().lineError = ((int) pc);
	 } if(rt != null){ 
		System.out.println("type identifier: " + rt);		 
		RESULT = rt; 
	} if(bs != null){ 
		System.out.println("bound specification: " + bs);
	} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packed_conformant_array_schema",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conformant_array_schema ::= unpacked_conformant_array_schema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conformant_array_schema ::= packed_conformant_array_schema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameter_type ::= conformant_array_schema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameter_type ::= type_identifier 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(ti != null){ 
		System.out.println("type identifier: " + ti);		 
		RESULT = ti; 
	} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_type",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_parameter_section ::= function_heading 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameter_section",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedure_parameter_section ::= procedure_heading 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_parameter_section",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_parameter_section ::= VAR identifier_list COLON parameter_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_parameter_section",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value_parameter_section ::= identifier_list COLON parameter_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_parameter_section",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formal_parameter_section ::= function_parameter_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formal_parameter_section ::= procedure_parameter_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formal_parameter_section ::= variable_parameter_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // formal_parameter_section ::= value_parameter_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formal_parameter_list_optinonal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_optinonal",157, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formal_parameter_list_optinonal ::= formal_parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_optinonal",157, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // semi_colon_formal_parameter_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_formal_parameter_section",180, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // semi_colon_formal_parameter_section ::= SEMICOLON formal_parameter_section semi_colon_formal_parameter_section 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_colon_formal_parameter_section",180, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // formal_parameter_list ::= LPARENT formal_parameter_section RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_identification ::= FUNCTION function_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_identification",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedure_identification ::= PROCEDURE procedure_identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_identification",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // result_type ::= type_identifier 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(rt != null){ 
			System.out.println("result type : " + rt);		 
			RESULT = rt; 
			} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_heading ::= FUNCTION identifier formal_parameter_list_optinonal COLON result_type 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("function heading returned type: " + fp);
		if(f != null){ 
			System.out.println("entrou no f !=null");
			SemanticManager.getInstance().lineError = ((int) f);
		} if(id != null){ 
			System.out.println("entrou no id!=null ");
			System.out.println("rt: " + rt);
			SemanticManager.getInstance().addIdentifier(id.toString());
			SemanticManager.getInstance().addFunction(id.toString(), rt.toString());
		} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_heading",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procedure_heading ::= PROCEDURE identifier formal_parameter_list_optinonal 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("PROCEDURE: " + p); 
															if(p != null){ 
																SemanticManager.getInstance().lineError = ((int) p);
															} if(id != null){
																System.out.println("identifier: " + id);
																SemanticManager.getInstance().addIdentifier(id.toString());
																SemanticManager.getInstance().addProcedure(id.toString());
															} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compiler_defined_directives ::= EXTERNAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compiler_defined_directives",150, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_part ::= BEGIN statement_sequence END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_part",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // directive ::= compiler_defined_directives 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("directive",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // directive ::= FORWARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("directive",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_body ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_declaration ::= function_identification SEMICOLON function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= function_heading SEMICOLON directive 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_declaration ::= function_heading SEMICOLON function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure_body ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_declaration ::= procedure_identification SEMICOLON procedure_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure_declaration ::= procedure_heading SEMICOLON directive 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_declaration ::= procedure_heading SEMICOLON procedure_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_declaration_or_function_declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration",166, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_declaration_or_function_declaration ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration",166, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_declaration_or_function_declaration_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration_semi_colon",184, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedure_declaration_or_function_declaration_semi_colon ::= procedure_declaration_or_function_declaration SEMICOLON procedure_declaration_or_function_declaration_semi_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration_semi_colon",184, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedure_and_function_declaration_part ::= procedure_declaration_or_function_declaration_semi_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declaration ::= identifier_list COLON type 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(il != null){ 
			System.out.println("VARIABLE DECLARATION : " + il);		 
			RESULT = il;}
	   if(tp != null){
	     SemanticManager.getInstance().addIdentifier(il.toString());
	   	 SemanticManager.getInstance().addVariable(il.toString(), tp.toString(), "null");
	} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_declaration_part_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_optional",161, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_declaration_part_optional ::= variable_declaration_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_optional",161, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_declaration_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_semi_colon",185, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_declaration_semi_colon ::= variable_declaration SEMICOLON variable_declaration_semi_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_semi_colon",185, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_declaration_part ::= VAR variable_declaration SEMICOLON variable_declaration_semi_colon 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(va != null){ 
			SemanticManager.getInstance().lineError = ((int) va);
		} if(var != null) {
		//*************************
		//*************************
		//*************************
		System.out.println("VARIABLE DECLARATION PART: " + var);		 
			RESULT = var; 
		} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_definition ::= identifier EQUALS type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_definition_part_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_optional",160, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_definition_part_optional ::= type_definition_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_optional",160, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_definition_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_semi_colon",186, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_definition_semi_colon ::= type_definition SEMICOLON type_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_semi_colon",186, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_definition_part ::= TYPE type_definition SEMICOLON type_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_definition ::= identifier EQUALS constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_definition_part_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_optional",159, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_definition_part_optional ::= constant_definition_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_optional",159, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant_definition_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition_semi_colon",187, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant_definition_semi_colon ::= constant_definition SEMICOLON constant_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition_semi_colon",187, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant_definition_part ::= CONST constant_definition SEMICOLON constant_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_optional",158, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declaration_part_optional ::= label_declaration_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_optional",158, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comma_label ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_label",174, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comma_label ::= COMMA label comma_label 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lid2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lid2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lid2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		if(c != null){ 
			SemanticManager.getInstance().lineError = ((int) c);
		} 
		if(lid2 != null){ 
			SemanticManager.getInstance().addLabel(Integer.parseInt(lid2.toString()));
		}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_label",174, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declaration_part ::= LABEL label comma_label SEMICOLON 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
		if(le != null){ 
			SemanticManager.getInstance().lineError = ((int) le);
		} if(lid != null){ 
			SemanticManager.getInstance().addLabel(Integer.parseInt(lid.toString()));
		}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= label_declaration_part_optional constant_definition_part_optional type_definition_part_optional variable_declaration_part_optional procedure_and_function_declaration_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= declaration_part statement_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arguments_optional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments_optional",142, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // arguments_optional ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments_optional",142, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM identifier arguments_optional SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block DOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

